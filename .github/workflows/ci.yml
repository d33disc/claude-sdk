name: Claude SDK CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger

jobs:
  test:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, '3.10', '3.11']
        architecture: [x64]  # Use only x64 for better compatibility

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.architecture }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements-dev.txt
        pip install -e .
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 claude_sdk --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 claude_sdk --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Check formatting with black
      run: |
        black --check claude_sdk
        
    - name: Type check with mypy
      run: |
        mypy claude_sdk
        
    - name: Test with pytest
      run: |
        pytest --cov=claude_sdk tests/
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: false

  build-python-package:
    needs: test
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload package artifact
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/
    
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/v')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true

  build-and-push-docker:
    needs: test
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/claude-sdk:latest
          ghcr.io/${{ github.repository_owner }}/claude-sdk:${{ github.sha }}